"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that
have the greatest product. What is the value of this product?
"""

"""
To prepare the data for further processing, firstly, we save the number
as a string. Strings are iterable in Python, so we can iterate over them
and save every digit in a cell of a list object after casting them one
by one to an int value. Saved as a list, we can work with the number
very pleasantly.

While going through the list with a loop and computing the products, we
can reduce resource usage by checking first whether there is a zero
in the current sublist or not. If so, we don't need to compute the product
of the other numbers. This leads to a performance improvement of 15-20 %
according to my tests (on this specific data).

Note that Python casts variables automatically. You don't run
into problems by just computing the products with math.prod().
In Numpy, there occur problems when storing too big integers and
you get an integer overflow (without any warning!).
"""
import math


def sol():
    s = """73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450"""

    # Prepare the data for processing by storing them in a list.
    adj_digits = [int(i) for i in s if i not in {'\n', ' '}]

    max_product = 0
    current_index = 0

    # We are looking for sublists with length 13, hence the last list starts at index len(adj_digits) - 14.
    # The notation list[start_index:end_index] does not include list[end_index], so we take one more step.
    while current_index + 13 <= len(adj_digits):

        # Compute the product of the digits in the sublist
        curr_product = math.prod(adj_digits[current_index:current_index + 13])

        # If the product is bigger than the biggest product we found, take this one.
        if curr_product > max_product:
            max_product = curr_product

        # Take a step forward. If the next sublist contains a 0, find the next sublist without a 0.
        current_index += 1
        while 0 in adj_digits[current_index:current_index + 13]:
            current_index += 1

    return max_product


print(sol())
