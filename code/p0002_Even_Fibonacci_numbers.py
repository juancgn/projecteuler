"""
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms.
"""

"""
The Fibonacci numbers can be computed efficiently on the fly. As we only need even numbers, we need
to know which numbers are even. Actually, there is a rule about that: Every third Fibonacci number
must be even, all the others are odd.

Proof: The first three numbers are 0, 1, 1, and here, the rule applies. For any other sequence of numbers
a_{3k+1}, a_{3k+2}, a_{3k+3}, for which we can assume that a_{3k-2} is even and a_{3k-1} and a_{3k}
are odd, we see that
a_{3k+1} = a_{3k} + a_{3k-1} is the sum of two odd numbers, hence even, 
a_{3k+2} = a_{3k+1} + a_{3k} is the sum of an even and an odd number, hence odd, and
a_{3k+3} = a_{3k+2} + a_{3k+1} is the sum of an odd and an even number, hence odd.
By induction, the rule applies to every Fibonacci number. â–¡

There is also a solution with the Binet formula, which is remarkable slower. For those
who are interested in that, I implemented it below.
"""


def sol():
    # Initialize the first three Fibonacci numbers and the sum variable
    x0, x1, x2 = 0, 1, 1
    s = 0

    # Compute as long as the next Fibonacci number is under 4m
    while x0 < 4e+6:
        # Next even number is under 4m. Add it to the sum.
        s += x0

        # Move three steps forward.
        """
        Consider the current values |x0, x1, x2|. Next steps are
        1.          x0 |x1, x2, x1+x2|
        2.      x0, x1 |x2, x1+x2, x1+x2+x2|
        3.  x0, x1, x2 |x1+x2, x1+x2+x2, x1+x1+x2+x2+x2|
        =>  x0 = x1+x2,
            x1 = x0+x2, (updated x0!)
            x2 = x0+x1  (updated x0 and x1)
        """
        x0 = x1 + x2
        x1 = x0 + x2
        x2 = x0 + x1
    return s


def sol2():
    """Solution with Binet formula."""
    def binet_formula(n):
        return int((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) * (5 ** (-0.5)))

    # Sum
    s = 0

    # n is the current index of the Fibonacci number, f the Fibonacci number itself
    n = 0
    f = binet_formula(n)

    # Compute every Fibonacci number with the binet formula and check if it is even.
    # In that case, add this number to the sum and continue with n+3.
    # Stop when the next Fibonacci number is over 4m.
    while f < 4e+6:
        s += f
        n += 3
        f = binet_formula(n)

    return s


print(sol())
